
DROP DATABASE DB_IA_ASSITANT;

CREATE DATABASE DB_IA_ASSITANT;


------- ELIMINAR TODAS LAS TABLAS --------

DO $$ 
DECLARE
    tabla RECORD;
BEGIN
    FOR tabla IN
        SELECT tablename FROM pg_tables WHERE schemaname = 'public'
    LOOP
        EXECUTE format('DROP TABLE IF EXISTS %I CASCADE', tabla.tablename);
    END LOOP;
END $$;


CREATE TABLE USERS(
    User_ID SERIAL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Password VARCHAR(100) NOT NULL
);

CREATE TABLE PROJECT (
    Project_ID SERIAL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Start_Date DATE NOT NULL,
    End_Date DATE
);

CREATE TABLE TASK (
    Task_ID SERIAL PRIMARY KEY,
    Project_ID INT NOT NULL,
    Title VARCHAR(100) NOT NULL,
    Description TEXT,
    Start_Date DATE NOT NULL,
    End_Date DATE,
    Due_Date DATE,
    Status VARCHAR(20),
    FOREIGN KEY (Project_ID) REFERENCES PROJECT (Project_ID) ON DELETE CASCADE
);

CREATE TABLE NOTIFICATION (
    Notification_ID SERIAL PRIMARY KEY,
    Project_ID INT NOT NULL,
    Content TEXT NOT NULL,
    Creation_Date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Read BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (Project_ID) REFERENCES PROJECT (Project_ID) ON DELETE CASCADE
);

CREATE TABLE USER_PROJECT (
    User_ID INT NOT NULL,
    Project_ID INT NOT NULL,
    Role VARCHAR(50),
    Assignment_Date DATE,
    PRIMARY KEY (User_ID, Project_ID),
    FOREIGN KEY (User_ID) REFERENCES USERS (User_ID) ON DELETE CASCADE,
    FOREIGN KEY (Project_ID) REFERENCES PROJECT (Project_ID) ON DELETE CASCADE
);

CREATE TABLE USER_NOTIFICATION (
    User_ID INT NOT NULL,
    Notification_ID INT NOT NULL,
    Read BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (User_ID, Notification_ID),
    FOREIGN KEY (User_ID) REFERENCES USERS (User_ID) ON DELETE CASCADE,
    FOREIGN KEY (Notification_ID) REFERENCES NOTIFICATION (Notification_ID) ON DELETE CASCADE
);

CREATE TABLE USER_TASK (
    User_ID INT NOT NULL,
    Task_ID INT NOT NULL,
    Completed BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (User_ID, Task_ID),
    FOREIGN KEY (User_ID) REFERENCES USERS (User_ID) ON DELETE CASCADE,
    FOREIGN KEY (Task_ID) REFERENCES TASK (Task_ID) ON DELETE CASCADE
);
